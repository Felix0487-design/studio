/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and access control, while relaxing data validation.  It enforces user-based access control for 'votes' to restrict each user to one vote.
 *
 * Data Structure:
 * The data structure consists of a top-level collection 'votes' where each document represents a vote. Document IDs in 'votes' are expected to match the user's UID, ensuring uniqueness.
 *
 * Key Security Decisions:
 * - Access to 'votes/{voteId}' is restricted to the user whose UID matches the 'voteId'.
 * - The rules explicitly deny any unauthorized access.
 *
 * Denormalization for Authorization:
 * The document ID of the 'votes' collection, which is `{voteId}`, is expected to match the user's UID.
 *
 * Structural Segregation:
 * N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual vote documents. Ensures that only the user whose UID matches the voteId can create, read, update, or delete their vote.
     * @path /votes/{voteId}
     * @allow (create) - Authenticated user with UID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2' can create a vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @allow (get) - Authenticated user with UID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2' can read vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @allow (update) - Authenticated user with UID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2' can update vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @allow (delete) - Authenticated user with UID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2' can delete vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @deny (create) - Authenticated user with UID 'unauthorizedUid' cannot create a vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @deny (get) - Authenticated user with UID 'unauthorizedUid' cannot read vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @deny (update) - Authenticated user with UID 'unauthorizedUid' cannot update vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @deny (delete) - Authenticated user with UID 'unauthorizedUid' cannot delete vote document with ID 'pmTjxZ4i2fbXua0odmz2ClG3wRk2'.
     * @principle Enforces document ownership for all operations, ensuring only the owner can manage their vote.
     */
    match /votes/{voteId} {
      allow get: if isSignedIn() && isOwner(voteId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(voteId);
      allow update: if isSignedIn() && isExistingOwner(voteId);
      allow delete: if isSignedIn() && isExistingOwner(voteId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(voteId) {
      return request.auth.uid == voteId;
    }

    function isExistingOwner(voteId) {
        return isOwner(voteId) && resource != null;
    }
  }
}