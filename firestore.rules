rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    match /candidates/{candidateId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    match /users/{parentUserId}/votes/{voteId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isParentOwner(parentUserId) {
        return isSignedIn() && request.auth.uid == parentUserId;
      }

      function isExistingParentOwner(parentUserId) {
        return isSignedIn() && isParentOwner(parentUserId) && existsAfter(/databases/$(database)/documents/users/$(parentUserId)/votes/$(voteId));
      }

      allow create: if isSignedIn() && isParentOwner(parentUserId);
      allow get, list: if isSignedIn() && isParentOwner(parentUserId);
      allow update: if isExistingParentOwner(parentUserId);
      allow delete: if isExistingParentOwner(parentUserId);
    }
  }
}