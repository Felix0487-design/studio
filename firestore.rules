/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy: This ruleset prioritizes a balance between strict authorization and flexible data shapes to enable rapid prototyping. It focuses on secure access control while minimizing schema validation.
 *
 * Data Structure: Votes are stored in the `/votes/{voteId}` collection.
 *
 * Key Security Decisions:
 * - Only authenticated users can create votes.
 * - Read access (get, list) to votes is public to display results.
 * - Users can only create their own vote (voteId must match their UID).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages individual votes. Allows public read access but restricts creation to the authenticated user with matching voteId (UID).
     * @path /votes/{voteId}
     * @allow (create) User 'user_abc' can create a vote with document ID 'user_abc' and valid data.
     * @deny (create) User 'user_abc' cannot create a vote with document ID 'user_xyz'.
     * @allow (get, list) Anyone can read votes to display results.
     * @allow (update, delete) Nobody can update or delete votes.
     * @principle Allows public read access but restricts creation to the authenticated user.
     */
    match /votes/{voteId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == voteId;
      allow update, delete: if false;
    }

    // Global helper functions
    function isSignedIn() {
      return request.auth != null;
    }
  }
}